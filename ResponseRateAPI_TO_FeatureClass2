import pandas as pd
import csv
import requests
import numpy
import json
import arcpy
import os
import xlwt
import shutil
from time import strftime
from datetime import datetime, timedelta

arcpy.env.overwriteOutput=True

"""
Pre-Script Steps:
Go to this link: https://api.census.gov/data/2020/dec/responserate/examples.html
Get National Average Response Rate and insert number into NatAvg variable below
Also, open ArcMap --> ResponseRates.mxd & ResponseRates_byACO.mxd
Change the symbology to reflect the updated National Average Response Rate
Once updated, save and close Arc.
Finally, run this script.
"""

NatAvg = "65.5"
key = "88addaa28bbb2f5f7db63dca01c31f19da9b4c47"
PHRCC_States = ['10','11','21','24','39','42','47','51','54']
MCD_States = ['39','42']
ArchiveFolder = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/Archive/'
EveryoneRR = 'M:/02_Everyone/GEOGRAPHY/ResponseRates/'
ArchiveDay = (datetime.now()-timedelta(1)).strftime("%m-%d-%y")
ACO_Everyone = 'M:/02_Everyone/GEOGRAPHY/ResponseRates/ACO/'
tracttable = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/TractResponseRates'
countytable = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CountyResponseRates'
placetable = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/PlaceResponseRates'
mcdtable = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/MCDResponseRates'
cdtable =  'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CDResponseRates'
statetable =  'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/StateResponseRates'
ACO_County_RR_lst = []
ACO_County_dict = {
    "2355":[11001],
    "2356":[10001,10003,10005],
    "2357":[21001,21005,21009,21011,21013,21015,21017,21019,21021,21023,21025,21037,21041,21043,21045,21049,21051,21053,21057,21063,21065,21067,21069,21071,21073,21077,21079,21081,21087,21089,21095,21097,21103,21109,21113,21115,21117,21119,21121,21125,21127,21129,21131,21133,21135,21137,21151,21153,21155,21159,21161,21147,21165,21167,21169,21171,21173,21175,21181,21187,21189,21191,21193,21195,21197,21199,21201,21203,21205,21207,21209,21217,21229,21231,21235,21237,21239],
    "2360":[24510],
    "2362":[24005,24011,24013,24015,24019,24025,24029,24035,24039,24041,24045,24047],
    "2365":[39061],
    "2367":[39049],
    "2368":[39017,39023,39027,39047,39057,39097,39113,39135,39165],
    "2369":[39003,39011,39021,39033,39037,39039,39041,39051,39063,39065,39069,39091,39095,39101,39107,39109,39117,39123,39125,39137,39143,39147,39149,39159,39161,39171,39173,39175],
    "2370":[39001,39009,39013,39015,39025,39045,39053,39059,39071,39073,39079,39087,39089,39105,39111,39115,39119,39121,39127,39129,39131,39141,39145,39163,39167],
    "2371":[42025,42069,42077,42079,42089,42095,42103,42127],
    "2372":[42005,42007,42019,42031,42039,42049,42051,42053,42059,42073,42085,42121,42123,42125,42129],
    "2373":[42001,42041,42043,42055,42071,42075,42099,42133],
    "2374":[42017,42091],
    "2377":[42003],
    "2378":[42011,42029,42045,42107],
    "2379":[42009,42013,42015,42021,42023,42027,42033,42035,42037,42047,42057,42061,42063,42065,42067,42081,42083,42087,42093,42097,42105,42109,42111,42113,42115,42117,42119,42131],
    "2380":[47001,47009,47013,47019,47025,47029,47057,47059,47063,47067,47073,47089,47091,47093,47105,47129,47145,47151,47155,47163,47171,47173,47179],
    "2381":[47033,47045,47047,47069,47075,47095,47097,47131,47157,47167],
    "2382":[47015,47021,47037,47041,47111,47147,47149,47159,47165,47169,47187,47189],
    "2386":[51003,51033,51540,51043,51047,51057,51061,51065,51069,51630,51079,51660,51099,51103,51109,51113,51683,51685,51133,51137,51139,51153,51157,51159,51165,51171,51177,51179,51187,51193,51840],
    "2387":[51001,51550,37053,51073,51650,51095,51115,51700,51710,51131,51735,51740,51800,51810,51830,51199],
    "2388":[51007,51025,51036,51041,51570,51049,51053,51595,51620,51075,51081,51085,51087,51670,51093,51097,51101,51111,51117,51119,51127,51135,51730,51145,51147,51149,51760,51175,51181,51183],
    "2389":[51005,51009,51011,51015,51017,51019,51021,51023,51520,51027,51029,51530,51031,51035,51037,51580,51045,51590,51051,51063,51067,51640,51071,51077,51083,51089,51091,51105,51678,51680,51690,51121,51125,51720,51141,51143,51155,51750,51161,51770,51163,51167,51775,51169,51173,51790,51185,51191,51820,51195,51197],
    "2390":[54001,54003,54005,54007,54009,54011,54013,54015,54017,54019,54021,54023,54025,54027,54029,54031,54033,54035,54037,54039,54041,54043,54045,54049,54051,54053,54047,54055,54057,54059,54061,54063,54065,54067,54069,54071,54073,54075,54077,54079,54081,54083,54085,54087,54089,54091,54093,54095,54097,54099,54101,54103,54105,54107,54109]
}
ACO_NonCounty_lst = [2358,2359,2361,2363,2364,2366,2375,2376,2383,2384,2385]
county_hu = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/Spreadsheets/CountyHU.xlsx')
tract_hu = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/Spreadsheets/TractMatching.xlsx')
ACO_dbf = 'M:\\08_Geography\\GEO\\SpecialProjects\\ResponseRates\\ResponseRateMapper\\ACO_Update.dbf'
ACO_Shape = 'M:\\08_Geography\\GEO\\SpecialProjects\\ResponseRates\\Shapefiles\\ACO_Boundary.shp'
ACO_Update = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/Spreadsheets/ACOUpdate.csv"
output_location = 'M:\\08_Geography\\GEO\\SpecialProjects\\ResponseRates\\ResponseRateMapper'
Day = (datetime.now()-timedelta(0)).strftime("%m%d")
#
ACOs = ['2355','2356','2357','2358','2359','2360','2361','2362','2363','2364','2365','2366','2367','2368','2369','2370','2371','2372','2373','2374','2375','2376','2377','2378','2379','2380','2381','2382','2383','2384','2385','2386','2387','2388','2389','2390']
RR_folder = "M:/02_Everyone/GEOGRAPHY/ResponseRates/ACO/ResponseRatesReport/"
RR_spreadsheet = "M:/02_Everyone/GEOGRAPHY/ResponseRates/ResponseUpdate.xls"
tracts_finaldf = pd.DataFrame()
counties_finaldf = pd.DataFrame()
MCD_finaldf = pd.DataFrame()
place_finaldf = pd.DataFrame()
cd_finaldf = pd.DataFrame()
st_finaldf= pd.DataFrame()


arcpy.AddMessage('Grabbing data from API...')
for ST in PHRCC_States:
    arcpy.AddMessage('Getting data for state ' + ST + ' response rates')
    st_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=state:'+ST+'&key='+key
    st_r = requests.get(st_url)
    st_json = st_r.json()
    #making a temporary dataframe from the json for each iteration and then appending it to the global dataframe
    st_df = pd.DataFrame(data= st_json[1:],columns= st_json[0])
    st_finaldf = st_finaldf.append(st_df)

for state in PHRCC_States:
    # go to this link https://api.census.gov/data/2020/dec/responserate/examples.html to see the available API urls and an example of what is returned
    counties = []
    url = 'https://api.census.gov/data/2020/dec/responserate?get=COUNTY&for=county:*&in=state:'+state+'&key='+key
    r = requests.get(url)
    result = r.json()
    i = 1
    while i < len(result):
        counties.append(str(result[i][0]))
        i+=1
    for county in counties:
        arcpy.AddMessage('Getting ' + state + ' County: ' + county + ' tracts...')  
        t_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=tract:*&in=state:'+state+'&in=county:'+county+'&key='+key
        r = requests.get(t_url)
        tract_json = r.json()
        t_df = pd.DataFrame(data= tract_json[1:],columns= tract_json[0])
        tracts_finaldf= tracts_finaldf.append(t_df)
    if state != '72':
        arcpy.AddMessage('Getting State:' + state + ' Congressional Districts')
        cd_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=congressional%20district:*&in=state:'+state+'&key='+key
        cd_r = requests.get(cd_url)
        cd_json = cd_r.json()
        cd_df = pd.DataFrame(data= cd_json[1:],columns= cd_json[0])
        cd_finaldf = cd_finaldf.append(cd_df)
        arcpy.AddMessage('Getting State:' + state + ' places...')
        pl_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=place:*&in=state:'+state+'&key='+key
        pl_r = requests.get(pl_url)
        pl_json = pl_r.json()
        pl_df = pd.DataFrame(data= pl_json[1:],columns= pl_json[0])
        place_finaldf = place_finaldf.append(pl_df)
    arcpy.AddMessage('Getting State:' + state + ' counties...')
    c_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=county:*&in=state:'+state+'&key='+key
    county_r = requests.get(c_url)
    county_json = county_r.json()
    c_df = pd.DataFrame(data= county_json[1:],columns= county_json[0])
    counties_finaldf = counties_finaldf.append(c_df)

for st in MCD_States:
        arcpy.AddMessage('Getting State:' + st + ' MCDs...')
        mcd_url = 'https://api.census.gov/data/2020/dec/responserate?get=DRRALL,CRRINT,RESP_DATE,CRRALL,GEO_ID,DRRINT&for=county%20subdivision:*&in=state:'+st+'&key='+key
        mcd_r = requests.get(mcd_url)
        mcd_json = mcd_r.json()
        mcd_df = pd.DataFrame(data= mcd_json[1:],columns= mcd_json[0])
        MCD_finaldf = MCD_finaldf.append(mcd_df)

tracts_finaldf['GEO_ID'] =  tracts_finaldf.GEO_ID.str.slice(start=9)
tracts_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv')
counties_finaldf['GEO_ID'] =  counties_finaldf.GEO_ID.str.slice(start=9)
counties_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv')
place_finaldf['GEO_ID'] =  place_finaldf.GEO_ID.str.slice(start=9)
place_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv')
MCD_finaldf['GEO_ID'] =  MCD_finaldf.GEO_ID.str.slice(start=9)
MCD_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv')
cd_finaldf['GEO_ID'] =  cd_finaldf.GEO_ID.str.slice(start=9)
cd_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv')
st_finaldf['GEO_ID'] =  st_finaldf.GEO_ID.str.slice(start=9)
st_finaldf.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/State_APIpull.csv')

if os.path.exists('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls'):
    os.remove('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls')

with pd.ExcelWriter('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseData.xls') as writer:
    counties_finaldf.to_excel(writer, sheet_name='County')
    tracts_finaldf.to_excel(writer, sheet_name='Tract')
    MCD_finaldf.to_excel(writer, sheet_name='MCDs')
    place_finaldf.to_excel(writer, sheet_name='Place')
    cd_finaldf.to_excel(writer, sheet_name= 'CD')
    st_finaldf.to_excel(writer, sheet_name= 'State')
shutil.copy('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseData.xls','M:/08_Geography/GEO/SpecialProjects/ResponseRates/')

arcpy.AddMessage('Data pulled successfully. ')
arcpy.AddMessage('***********************************')
arcpy.AddMessage('')
arcpy.AddMessage('Importing CSV to Geodatabase...')



# Local variables:
tract_apipull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv'
County_APIpull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv'
Place_APIPull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv'
MCD_APIPull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv'
CD_APIPull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv'
St_APIPull_csv = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/State_APIpull.csv'

ResponseMapper_gdb = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb'

# Set the current workspace
arcpy.env.workspace = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb'

# Check for existence of data before deleting
if arcpy.Exists("TractResponseRates"):
    arcpy.Delete_management("TractResponseRates")
if arcpy.Exists("CountyResponseRates"):
    arcpy.Delete_management("CountyResponseRates")
if arcpy.Exists("MCDResponseRates"):
    arcpy.Delete_management("MCDResponseRates")
if arcpy.Exists("PlaceResponseRates"):
    arcpy.Delete_management("PlaceResponseRates")
if arcpy.Exists("CDResponseRates"):
    arcpy.Delete_management("CDResponseRates")
if arcpy.Exists("StateResponseRates"):
    arcpy.Delete_management("StateResponseRates")

# Process: Table to Table
arcpy.TableToTable_conversion(tract_apipull_csv, ResponseMapper_gdb, "TractResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 12 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,,county,-1,-1;tract \"tract\" true true false 8 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv,tract,-1,-1", "")
arcpy.TableToTable_conversion(County_APIpull_csv, ResponseMapper_gdb, "CountyResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 6 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/County_APIpull.csv,county,-1,-1", "")
arcpy.TableToTable_conversion(MCD_APIPull_csv, ResponseMapper_gdb, "MCDResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 10 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 3 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,county,-1,-1;county_subdivision \"county subdivision\" true true false 10 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/MCD_APIpull.csv,county subdivision,-1,-1", "")
arcpy.TableToTable_conversion(Place_APIPull_csv, ResponseMapper_gdb, "PlaceResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 12 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 4 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,state,-1,-1;place \"place\" true true false 10 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Place_APIpull.csv,place,-1,-1", "")
arcpy.TableToTable_conversion(CD_APIPull_csv, ResponseMapper_gdb, "CDResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 6 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 8 Double 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,state,-1,-1;congressional_district \"congressional district\" true true false 3 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/CD_APIpull.csv,congressional district,-1,-1", "")
arcpy.TableToTable_conversion(St_APIPull_csv, ResponseMapper_gdb, "StateResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\08_Geography\GEO\SpecialProjects\ResponseRates\ResponseRateMapper\State_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 4 Long 0 0 ,First,#,M:\08_Geography\GEO\SpecialProjects\ResponseRates\ResponseRateMapper\State_APIpull.csv,GEO_ID,-1,-1;CRRALL \"CRRALL\" true true false 8 Double 0 0 ,First,#,M:\08_Geography\GEO\SpecialProjects\ResponseRates\ResponseRateMapper\State_APIpull.csv,CRRALL,-1,-1;CRRINT \"CRRINT\" true true false 8 Double 0 0 ,First,#,M:\08_Geography\GEO\SpecialProjects\ResponseRates\ResponseRateMapper\State_APIpull.csv,CRRINT,-1,-1;state \"state\" true true false 4 Long 0 0 ,First,#,M:\08_Geography\GEO\SpecialProjects\ResponseRates\ResponseRateMapper\State_APIpull.csv,state,-1,-1", "")




arcpy.AddMessage("data imported.")
arcpy.AddMessage('')
arcpy.AddMessage('adding leading zeros to GEOID field...')

# add leading zeros to tract GEOID
with arcpy.da.UpdateCursor(tracttable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 10:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(countytable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 4:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(placetable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 6:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(mcdtable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 9:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(cdtable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 3:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)



arcpy.AddMessage('')
arcpy.AddMessage('joining data to featureclass...')
arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb//Region_Tracts_Post2020',"Tracts")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/TractResponseRates', "TractResponseData")
arcpy.AddMessage('Tracts done')

arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/Region_Counties',"Counties")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CountyResponseRates', "CountyResponseData")
arcpy.AddMessage('Counties done')

arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/Region_CouSub',"MuniID")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/MCDResponseRates', "MCDResponseData")
arcpy.AddMessage('Munis done')

arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/Region_IncPl',"IncPlaces")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/PlaceResponseRates', "PlaceResponseData")
arcpy.AddMessage('IncPlaces done')

arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CongressionalDistricts',"Congress")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CDResponseRates', "CDResponseData")
arcpy.AddMessage('Congressional done')

arcpy.MakeFeatureLayer_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/Region_States',"States")
arcpy.MakeTableView_management('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/StateResponseRates', "StateResponseData")
arcpy.AddMessage('States done')


inlayer = "Tracts"
in_Field = "GEOID"
joinTable = "TractResponseData"
joinField = "GEO_ID"

tractsjoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('tracts joined')

if arcpy.Exists("TractsResponse"):
    arcpy.Delete_management("TractsResponse")
    arcpy.AddMessage('TractsResponse deleted')

arcpy.FeatureClassToFeatureClass_conversion(tractsjoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "TractsResponse")
arcpy.AddMessage('TractsResponse created')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove tracts join done')

inlayer = "Counties"
in_Field = "GEOID"
joinTable = "CountyResponseData"
joinField = "GEO_ID"

countiesjoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('counties joined')

if arcpy.Exists("CountiesResponse"):
    arcpy.Delete_management("CountiesResponse")
    arcpy.AddMessage('countiesResponse deleted')

arcpy.FeatureClassToFeatureClass_conversion(countiesjoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "CountiesResponse")
arcpy.AddMessage('countiesResponse created')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove counties join done')

inlayer = "MuniID"
in_Field = "GEO_ID"
joinTable = "MCDResponseData"
joinField = "GEO_ID"

MCDsjoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('MCD join done')

if arcpy.Exists("MCDsResponse"):
    arcpy.Delete_management("MCDsResponse")
    arcpy.AddMessage('mcd delete done')

arcpy.FeatureClassToFeatureClass_conversion(MCDsjoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "MCDsResponse")
arcpy.AddMessage('mcds join created')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove mcds join done')

inlayer = "IncPlaces"
in_Field = "GEO_ID"
joinTable = "PlaceResponseData"
joinField = "GEO_ID"

IncPlacesjoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('IncPlaces join done')

if arcpy.Exists("IncPlacesResponse"):
    arcpy.Delete_management("IncPlacesResponse")
    arcpy.AddMessage('incplace delete done')

arcpy.FeatureClassToFeatureClass_conversion(IncPlacesjoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "IncPlacesResponse")
arcpy.AddMessage('incplace join created')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove incplace join done')

inlayer = "Congress"
in_Field = "Congress_2"
joinTable = "CDResponseData"
joinField = "GEO_ID"

congressjoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('congress join done')

if arcpy.Exists("CongressionalDistrictsResponse"):
    arcpy.Delete_management("CongressionalDistrictsResponse")
    arcpy.AddMessage('congress delete done')

arcpy.FeatureClassToFeatureClass_conversion(congressjoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "CongressionalDistrictsResponse")
arcpy.AddMessage('congress join completed')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove congress join done')

inlayer = "States"
in_Field = "ST"
joinTable = "StateResponseData"
joinField = "GEO_ID"

statejoin = arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)
arcpy.AddMessage('state join done')

if arcpy.Exists("StatesResponse"):
    arcpy.Delete_management("StatesResponse")
    arcpy.AddMessage('state delete done')

arcpy.FeatureClassToFeatureClass_conversion(statejoin,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb', "StatesResponse")
arcpy.AddMessage('state join completed')

arcpy.RemoveJoin_management (inlayer)
arcpy.AddMessage('remove state join done')

arcpy.AddMessage('Feature data updated successfully. ArcMap document updated with new data. CSV data successfully updated. Response rates update complete.')

df_acorr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='ACO')
list_acorr = df_acorr.columns.tolist()
df_tractrr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='Tract')
df_planningtractrr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='PlanningTracts')
list_tractrr = df_tractrr.columns.tolist()
df_countyrr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='County')
list_countyrr = df_countyrr.columns.tolist()
df_staterr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='State')
list_staterr = df_staterr.columns.tolist()
df_mcdrr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='Townships')
list_mcdrr = df_mcdrr.columns.tolist()
df_placerr = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls', sheetname='Place')
list_placerr = df_placerr.columns.tolist()
df_tract_new = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls', sheetname='Tract')
df_county_new = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls', sheetname='County')
df_state_new = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls', sheetname='State')
df_mcd_new = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls', sheetname='MCDs')
df_place_new = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseData.xls', sheetname='Place')

df_aco_new = pd.merge(df_county_new,
                      county_hu,
                      left_on='GEO_ID',
                      right_on='GEOID',
                      how='left')
df_aco_new['RspnHU']=df_aco_new['CRRALL']*.01*df_aco_new['TotHU']
df_aco_new['IntRspnHU']=df_aco_new['CRRINT']*.01*df_aco_new['TotHU']

for y in ACO_County_dict:
        df_4 = df_aco_new[df_aco_new.GEO_ID.isin(ACO_County_dict.get(y))]
        print(df_4)
        ACORR = df_4.sum(axis=0)
        TotHU = ACORR['TotHU']
        TotRespHU = ACORR['RspnHU']
        IntRespHU = ACORR['IntRspnHU']
        add = (y,TotHU,TotRespHU,IntRespHU)
        ACO_County_RR_lst.append(add)
df_4 = pd.DataFrame(list(ACO_County_RR_lst),columns=['ACO','TotHU','TotRspn','IntRspn'])
df_4['ACO']=pd.to_numeric(df_4['ACO'])
df_6 = pd.merge(df_acorr,
                  df_4,
                  left_on='ACO',
                  right_on='ACO',
                  how='left')
df_aco_join = pd.merge(df_tract_new,
                  df_tractrr,
                  left_on='GEO_ID',
                  right_on='GEOID',
                  how='left')
df_aco_join=df_aco_join[['GEO_ID','ACO','CRRALL','CRRINT']]
df_aco=pd.merge(df_aco_join,
                      tract_hu,
                      left_on='GEO_ID',
                      right_on='tract_new',
                      how='left')
df_aco['RspnHU']=df_aco['CRRALL']*.01*df_aco['TotHU']
df_aco['IntRspnHU']=df_aco['CRRINT']*.01*df_aco['TotHU']
df_aco = df_aco[['ACO','TotHU','RspnHU','IntRspnHU']]
df_aco = df_aco.groupby(['ACO'],as_index=False).agg({'TotHU':'sum', 'RspnHU':'sum', 'IntRspnHU':'sum'})
df_aco1 = df_aco[df_aco.ACO.isin(ACO_NonCounty_lst)]
df_acoint = pd.merge(df_6,
                df_aco1,
                left_on='ACO',
                right_on='ACO',
                how='left')
df_acoint=df_acoint.fillna(0)
df_acoint['TotalHU']=df_acoint['TotHU_x']+df_acoint['TotHU_y']
df_acoint['TotRspn']=df_acoint['TotRspn']+df_acoint['RspnHU']
df_acoint['IntRspn']=df_acoint['IntRspn']+df_acoint['IntRspnHU']
df_acoint['NewTotRate']=(df_acoint['TotRspn']/df_acoint['TotalHU'])*100
df_acoint['NewIntRate']=(df_acoint['IntRspn']/df_acoint['TotalHU'])*100
df_acoint['Daily Response Rate'] = df_acoint['NewTotRate'] - df_acoint['Total Response Rate']
df_acoint['Daily Internet Response Rate'] = df_acoint['NewIntRate'] - df_acoint['Internet Response Rate']
df_acoint['Total Response Rate'] = df_acoint['NewTotRate']
df_acoint['Internet Response Rate'] = df_acoint['NewIntRate']
df_acoint=df_acoint[list_acorr]
df_lane = df_acoint.groupby(['Lane'],as_index=False).agg({'Total Response Rate':'mean'})
df_lane.rename(columns={'Lane':'Lane','Total Response Rate':'LaneRR'}, inplace=True)
df_acofinal = pd.merge(df_acoint,
                       df_lane,
                       on='Lane',
                       how='left')
df_acofinal['Total Response Rate by Lane'] = df_acofinal['LaneRR']
df_acofinal=df_acofinal[list_acorr]
print(df_acofinal)
df_acofinal.to_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/Spreadsheets/ACOUpdate.csv')
arcpy.AddMessage("ACOUpdate csv exported...")

df_countyfinal = pd.merge(df_countyrr,
                  df_county_new,
                  left_on='GEOID',
                  right_on='GEO_ID',
                  how='left')
df_countyfinal['Daily Response Rate'] = df_countyfinal['CRRALL'] - df_countyfinal['Total Response Rate']
df_countyfinal['Daily Internet Response Rate'] = df_countyfinal['CRRINT'] - df_countyfinal['Internet Response Rate']
df_countyfinal['Total Response Rate'] = df_countyfinal['CRRALL']
df_countyfinal['Internet Response Rate'] = df_countyfinal['CRRINT']
df_countyfinal=df_countyfinal[list_countyrr]
print(df_countyfinal)


df_tractfinal = pd.merge(df_tractrr,
                  df_tract_new,
                  left_on='GEOID',
                  right_on='GEO_ID',
                  how='left')
df_tractfinal['Daily Response Rate'] = df_tractfinal['CRRALL'] - df_tractfinal['Total Response Rate']
df_tractfinal['Daily Internet Response Rate'] = df_tractfinal['CRRINT'] - df_tractfinal['Internet Response Rate']
df_tractfinal['Total Response Rate'] = df_tractfinal['CRRALL']
df_tractfinal['Internet Response Rate'] = df_tractfinal['CRRINT']
df_tractfinal=df_tractfinal[list_tractrr]
print(df_tractfinal)


df_statefinal = pd.merge(df_staterr,
                  df_state_new,
                  left_on='State ID',
                  right_on='GEO_ID',
                  how='left')
df_statefinal['Daily Response Rate'] = df_statefinal['CRRALL'] - df_statefinal['Total Response Rate']
df_statefinal['Daily Internet Response Rate'] = df_statefinal['CRRINT'] - df_statefinal['Internet Response Rate']
df_statefinal['Total Response Rate'] = df_statefinal['CRRALL']
df_statefinal['Internet Response Rate'] = df_statefinal['CRRINT']
df_statefinal=df_statefinal[list_staterr]
print(df_statefinal)


df_planningtractint = pd.merge(df_planningtractrr,
                  df_tract_new,
                  left_on='GEOID',
                  right_on='GEO_ID',
                  how='left')
df_planningtractint['Daily Response Rate'] = df_planningtractint['CRRALL'] - df_planningtractint['Total Response Rate']
df_planningtractint['Daily Internet Response Rate'] = df_planningtractint['CRRINT'] - df_planningtractint['Internet Response Rate']
df_planningtractint['Total Response Rate'] = df_planningtractint['CRRALL']
df_planningtractint['Internet Response Rate'] = df_planningtractint['CRRINT']
df_planningtractint=df_planningtractint[list_tractrr]
df = pd.read_excel('M:/08_Geography/GEO/SpecialProjects/ResponseRates/Spreadsheets/TractMatching.xlsx')
df_3 = pd.read_csv('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/Tract_APIpull.csv',usecols=['GEO_ID','CRRALL'],dtype=object)
UnmatchedTracts = [10001040202,10001041100,10001041801,10001042201,10001042202,10001042800,10001990000,10003010101,10003010702,10003013503,10003013904,10003014300,10003014805,10003014807,10003016302,10003016305,10003016601,10003016602,10003016604,10003016801,10003016804,10003980100,10003990100,10005050301,10005050504,10005050602,10005050704,10005050705,10005050802,10005050803,10005050901,10005050902,10005051003,10005051004,10005051005,10005051006,10005051007,10005051301,10005051303,10005051305,10005051306,10005051500,10005990000,11001000100,11001000201,11001000701,11001000801,11001000901,11001001001,11001001302,11001002502,11001002701,11001003700,11001003800,11001003900,11001004400,11001004701,11001005002,11001005201,11001005301,11001005500,11001005600,11001005800,11001006202,11001006804,11001007200,11001009501,11001010200,11001010600,11001011000,21005950100,21009950400,21009950600,21009950700,21011970200,21015070100,21015070200,21015070307,21015070308,21015070401,21015070402,21015070504,21017030100,21017030200,21019031002,21019031100,21025920100,21025920300,21025920400,21029020400,21029020500,21029020701,21029021101,21029980100,21031930300,21033920300,21035010302,21035010600,21043960600,21045950300,21047200900,21047201302,21047201503,21047980100,21051950200,21051950300,21053970201,21059000400,21061920400,21061980100,21063920100,21065920200,21065920300,21071920300,21071920400,21071920800,21071921000,21073070100,21073070402,21073070600,21073070701,21073070702,21073070800,21073071000,21073071100,21077960101,21079970100,21079970200,21081920100,21081920200,21081920300,21083020300,21085950100,21085950400,21093000901,21093001001,21093001002,21093001600,21093001700,21093980100,21099970300,21101020100,21101020400,21101020500,21101020601,21101020702,21101020900,21107970300,21109960100,21109960300,21111000200,21111002400,21111003500,21111005900,21111007100,21111008200,21111009000,21111009400,21111010307,21111010311,21111010402,21111010705,21111011002,21111011004,21111011102,21111011106,21111011200,21111011505,21111011601,21111011905,21111012002,21111012106,21111012411,21111012601,21111980100,21113060101,21113060400,21115960400,21117063603,21117063605,21117064000,21117064100,21117064200,21117066800,21121930400,21121930500,21121930601,21123960102,21125970200,21125971002,21125971102,21127930100,21131920100,21133950200,21133950402,21133950600,21137920300,21139040200,21143960100,21143980100,21145031400,21145031500,21147960300,21147960400,21151010102,21151010200,21151010300,21151010600,21151010800,21151011000,21151011100,21151011200,21151011302,21151011400,21153970200,21157950100,21157950500,21157950600,21159950200,21163970402,21163980100,21173920200,21177960200,21179930200,21179930302,21183920500,21185030702,21187970200,21191930100,21193970500,21193970600,21195930200,21195930300,21195931100,21197970100,21197970200,21199930100,21199930300,21199930402,21199930501,21199930502,21199930800,21199931102,21203950200,21205950200,21205950300,21209040100,21209040204,21209040206,21209040602,21209040603,21211040200,21211040401,21211040502,21213970400,21217920400,21217920500,21221970200,21221970300,21221980100,21221980200,21227010803,21227011700,21227011800,21229930200,21231920100,21231920200,21231920400,21231920700,21235920300,21235920400,21235920500,21235920600,24001000300,24001000400,24003701102,24003701200,24003701300,24003702701,24003706101,24003706301,24003706401,24003730100,24003730203,24003730402,24003730502,24003730504,24003730505,24003730506,24003730604,24003730700,24003731102,24003731202,24003731203,24003731204,24003731311,24003740102,24003740201,24003740400,24003740500,24003740702,24003750202,24003750203,24003980000,24003990000,24005402406,24005402509,24005403701,24005411407,24005490301,24005980000,24005980100,24005980200,24009860101,24009860102,24009860401,24009860802,24009860900,24009861001,24009990100,24013508101,24013508102,24015030506,24015030906,24017851002,24017851400,24017851500,24017990000,24019990000,24021750503,24021750803,24021751901,24021752204,24023000500,24023000600,24025301702,24027601201,24027604002,24027605102,24027605402,24027606705,24027606707,24027606806,24029990000,24031700205,24031700304,24031700311,24031700312,24031700607,24031700704,24031700716,24031700717,24031700719,24031700722,24031700816,24031700817,24031701213,24031701410,24031701420,24031701421,24031702500,24031702601,24031703212,24033800208,24033800214,24033800215,24033800509,24033800601,24033800604,24033801104,24033801706,24033801708,24033801804,24033801805,24033803401,24033803402,24033803522,24033803523,24033806200,24033806300,24033807200,24035990000,24035990100,24035990200,24037875500,24037875600,24037875801,24037875802,24037875901,24037875902,24037876002,24037876100,24037990000,24039930300,24039980400,24039990100,24041990000,24043010400,24043010500,24043010801,24043010900,24043011000,24043011201,24043011500,24045010502,24045010702,24047951100,24047980000,24047990000,24510100300,24510180100,24510180200,39001770300,39003010800,39003011300,39005970100,39007001200,39007001302,39007001400,39007990000,39013010900,39013012200,39015951300,39017010101,39017010201,39017010908,39017011002,39017011116,39017011117,39017011121,39023002606,39025040204,39025040701,39025041000,39025041103,39025041200,39025041304,39025041501,39025041502,39025042000,39027964500,39029951400,39035101200,39035103100,39035103400,39035103900,39035104100,39035104200,39035104300,39035104600,39035104900,39035106300,39035106400,39035110501,39035110801,39035111500,39035111600,39035111800,39035111902,39035112400,39035112500,39035112600,39035112800,39035113101,39035113500,39035113600,39035113801,39035114100,39035114300,39035114700,39035114900,39035115100,39035115200,39035115300,39035116100,39035116200,39035117202,39035118400,39035118500,39035118700,39035119100,39035119202,39035119300,39035131102,39035136102,39035151100,39035151400,39035152603,39035152604,39035154300,39035154700,39035160601,39035160700,39035160800,39035161700,39035161800,39035172103,39035175103,39035175104,39035188104,39035188105,39035190504,39035193800,39035193900,39035194800,39035194900,39035196500,39035980100,39035980500,39035981100,39035990000,39037555000,39037560100,39041011413,39041011550,39041011560,39041011730,39041011750,39043040600,39043040800,39043041500,39043041700,39043990100,39045030600,39045030900,39045031400,39045032500,39045032600,39045032702,39045032900,39045033100,39049001300,39049004000,39049004300,39049005000,39049006220,39049006230,39049006371,39049006383,39049006942,39049006990,39049007132,39049007194,39049007201,39049007203,39049007207,39049007210,39049007393,39049007395,39049007396,39049007551,39049007921,39049007933,39049007951,39049007952,39049007953,39049007954,39049008000,39049008141,39049008142,39049008161,39049008162,39049008370,39049009210,39049009331,39049009333,39049009362,39049009371,39049009374,39049009430,39049009450,39049009720,39049009740,39049009800,39049010200,39049010400,39049010500,39049980000,39051040700,39053953900,39057200900,39057210100,39057210200,39057210601,39057220100,39057220200,39057240301,39061002900,39061004500,39061004701,39061004702,39061005400,39061006500,39061007800,39061007900,39061010800,39061020602,39061020761,39061024321,39061024400,39061024902,39061025104,39061026101,39063000300,39063000900,39065000400,39071955000,39071955100,39075976400,39081000800,39081001700,39083007300,39083007700,39085201100,39085202900,39085204301,39085204302,39085205900,39085206000,39085990000,39087050500,39087051100,39089752800,39089753300,39089754101,39089755300,39089755600,39089755900,39089756202,39089756800,39089757400,39089757700,39089758600,39089758900,39089759100,39093013100,39093013200,39093023700,39093023800,39093030100,39093050300,39093070800,39093071000,39093080700,39093094100,39093097200,39093097400,39093990200,39095000200,39095000300,39095000600,39095000700,39095001000,39095001600,39095002200,39095002300,39095003400,39095003700,39095003900,39095004400,39095005100,39095005600,39095005702,39095005802,39095006800,39095007001,39095007101,39095007203,39095007205,39095007301,39095007303,39095007400,39095007500,39095007800,39095007902,39095008201,39095008202,39095008203,39095008301,39095008400,39095008500,39095008600,39095008700,39095008800,39095008901,39095008902,39095009000,39095009102,39095009201,39095009202,39095009900,39095990000,39099800300,39099800400,39099800500,39099811300,39099812100,39099812603,39099813500,39099813600,39101010202,39103408100,39103408302,39103415800,39103417000,39109350100,39109365000,39113001800,39113050103,39113125101,39113980000,39117965200,39117965400,39117965500,39119911200,39119911600,39121968400,39123051200,39127965800,39127965900,39127966300,39129021100,39129021200,39129021300,39129021402,39131952600,39133600301,39133601701,39133602100,39137030300,39139001700,39141955601,39141955602,39141955800,39145002900,39151700700,39151711000,39151711311,39151712111,39153507500,39153531401,39153531500,39155920500,39155920600,39157020800,39157021500,39159050400,39159050500,39159050700,39165030900,39165031000,39165031600,39165031700,39165031902,39165031903,39165032005,39165032007,39165032201,39167020200,39167021200,39173020700,39173020900,39173021600,42001030102,42001030800,42001030900,42003010300,42003101600,42003101700,42003120400,42003120700,42003120800,42003130100,42003130300,42003130400,42003140600,42003141000,42003210700,42003220600,42003240600,42003241200,42003250300,42003250700,42003260900,42003261200,42003270400,42003271500,42003310300,42003409000,42003411000,42003412001,42003458000,42003512800,42003512900,42003560600,42003561000,42003561100,42003561200,42003561600,42003561700,42003562900,42003563200,42003980000,42003980100,42003980300,42003980400,42003980500,42003980600,42003980800,42003980900,42003981000,42003981100,42003981200,42007600700,42007601800,42009961000,42011002000,42011010400,42011010600,42011010700,42011010802,42011011701,42011011904,42011012002,42011012105,42011012700,42011012900,42011013401,42011013500,42011013900,42011014100,42011014200,42013010402,42013010700,42013011100,42013011200,42015950500,42017100209,42017101803,42017105400,42017106200,42017980000,42019910500,42019912401,42019912402,42019912700,42025020105,42025020200,42025020300,42025020500,42025020800,42027010800,42027010900,42027011000,42027011100,42027011300,42027011400,42027011502,42027011702,42027011902,42027981202,42029301000,42029302101,42029302202,42029302805,42029303802,42029304501,42029310400,42029311700,42031160102,42031160200,42031160700,42035030700,42037051100,42041011302,42041011601,42041011605,42041011801,42041011802,42041012800,42041013101,42041013102,42041981001,42043020600,42043020700,42043022900,42043024600,42043024800,42045401301,42045401501,42045406401,42045406402,42045406803,42045409702,42045409802,42045410100,42045410301,42045410302,42045410400,42045980000,42049000900,42049011505,42049011507,42049012300,42049980109,42049990000,42053530201,42053530300,42055010300,42055010400,42055010500,42055010700,42055011700,42055012000,42059970100,42061950300,42063961101,42067070100,42069111800,42071010101,42071010300,42071010600,42071010801,42071010900,42071011100,42071011703,42071011804,42071011902,42071012102,42071012104,42071012700,42071013000,42071013304,42071013501,42071013702,42071014300,42071014602,42075002800,42075003800,42077002301,42077006202,42077006307,42077006308,42077009600,42079210900,42079214000,42079216000,42079216600,42079980100,42081010500,42081011602,42081011700,42085032400,42085032501,42085032800,42087961100,42089300102,42089300202,42089300301,42089300304,42089300305,42089300307,42089300309,42089300402,42089300403,42089300800,42089300900,42089301001,42089301205,42089301301,42089301401,42089301402,42091203700,42091204102,42091205400,42091205801,42091206102,42091206702,42091208302,42095010600,42095015201,42095016800,42095017102,42095017401,42095018002,42097080300,42101000100,42101000402,42101000700,42101000804,42101001202,42101001300,42101004102,42101005000,42101012500,42101013700,42101014200,42101016000,42101018800,42101020700,42101036900,42101038300,42101039000,42101980000,42101980200,42101980300,42101980400,42101980500,42101980600,42101980700,42101980800,42101980900,42101989100,42103950201,42103950301,42103950502,42103950605,42103950801,42103950802,42103950900,42105950100,42105950400,42107000900,42107001900,42111020600,42111020800,42111021901,42113960100,42113960200,42115032400,42119090200,42119980101,42121200200,42125742100,42125744100,42125745100,42127961000,42127961100,42127961200,42129801800,42129801900,42129802002,42129804502,42129804702,42129804802,42129804900,42129805902,42129807200,42129807402,42129807900,42133010110,42133020320,42133020420,42133020521,42133020600,42133020720,42133020800,42133021210,42133021220,42133021900,42133022402,42133022600,42133022700,42133022800,42133022910,42133023822,42133023901,47001021000,47001021302,47001980100,47003950200,47007953100,47009011200,47009011402,47009011602,47009980100,47011010200,47011011100,47011011202,47011011300,47011011401,47011011500,47013950600,47013950700,47015960200,47017962100,47017980100,47019071300,47023970100,47023970300,47029980100,47031970200,47031970400,47031970500,47031970802,47031971000,47031980100,47035970102,47035970200,47035970400,47037010402,47037013000,47037013601,47037013602,47037013700,47037015610,47037015612,47037015631,47037015802,47037015803,47037018202,47037018301,47037018401,47037019005,47037019006,47037019114,47037019400,47037019500,47037980200,47039955002,47041920200,47043060200,47045964000,47045964400,47049965200,47051960400,47053966500,47053966700,47053967000,47053980100,47055920300,47057500300,47059090500,47059091000,47065010307,47065010903,47065011002,47065011201,47065011443,47065980100,47065980200,47071920400,47071920500,47077975300,47079969000,47079969500,47079969600,47081950200,47089070100,47089070700,47089070800,47093000901,47093003500,47093004500,47093005201,47093005712,47093005812,47093005904,47093005905,47093006900,47105060202,47105060302,47105060501,47107970101,47107970200,47107970600,47107970800,47109930500,47111970300,47113001606,47115050202,47119010202,47119010400,47119011002,47123925000,47123925100,47123925300,47123925400,47123925502,47125100400,47125100700,47125101303,47125101500,47125101700,47125101802,47125101804,47125101903,47125102002,47125102006,47125980100,47133950500,47135930200,47137925100,47139950202,47141000200,47141000302,47141001200,47145030201,47145030202,47145030300,47145030400,47145030800,47145980100,47147080700,47149040103,47149040302,47149040306,47149040403,47149040701,47149040805,47149040902,47149040903,47149040905,47149041101,47149041402,47149041403,47149041500,47149041600,47149042100,47149042300,47151975100,47153060101,47155080102,47155080201,47155080400,47155080602,47155080700,47155080802,47155080902,47155081000,47155081102,47157009200,47157009500,47157010000,47157010110,47157011400,47157020300,47157020512,47157020642,47157020643,47157020644,47157020810,47157020820,47157020831,47157020832,47157020900,47157021010,47157021137,47157021200,47157021342,47157021353,47157021510,47157021520,47157021540,47157021726,47157021732,47157021741,47157022022,47157022112,47157980100,47157980200,47157980300,47157980400,47161110200,47161980100,47161980200,47163042701,47165020902,47173040100,47177930200,47179060400,47179060502,47179060600,47179060700,47179060900,47179061300,47179061402,47179061602,47179061702,47179061901,47187050101,47187050203,47187050208,47187050602,47187050800,47187051201,47187051202,47189030101,47189030204,47189030307,47189030901,47189030903,51001090100,51001090200,51001090400,51001980100,51001980200,51001990100,51001990200,51003010300,51003010500,51003010601,51003010700,51003010800,51003010902,51003010903,51003011100,51007930100,51009010200,51009010502,51009010503,51011040100,51013101403,51013101404,51013101500,51013101702,51013101802,51013102801,51013102902,51013103402,51013103502,51013980100,51013980200,51015070600,51015070700,51015070800,51015071200,51017920100,51019030201,51019030402,51019050100,51023040302,51025930202,51025930300,51033030500,51035080400,51035080500,51035080602,51037930100,51041100205,51041100703,51041100927,51041101010,51043010100,51047930102,51047930201,51049930100,51053840100,51053840600,51053980100,51059431600,51059440502,51059460502,51059461601,51059461602,51059471202,51059480202,51059480300,51059482202,51059482501,51059482602,51059490103,51059491702,51059980100,51059980200,51059980300,51061930100,51061930302,51061930403,51063920101,51063920200,51065020102,51067020101,51067020300,51067020500,51067020700,51067020800,51067020900,51069050400,51069050802,51069050803,51069051000,51069051101,51073100100,51075400100,51079030200,51081880102,51083930201,51083930600,51085320900,51085321002,51087200104,51087200105,51087200107,51087200112,51087200116,51087200119,51087200120,51087200121,51087200128,51087200129,51087200130,51087200406,51087200410,51087200804,51087200903,51087201101,51087201201,51087201202,51087201401,51087201501,51087980100,51093280103,51095080101,51095080206,51095080301,51095080303,51095080401,51099040300,51103030300,51103990100,51105950300,51107611025,51107611802,51107611806,51107611900,51107980100,51109950100,51109950300,51113930100,51113930200,51115951300,51115951400,51115990100,51117930102,51117930200,51117930400,51119990100,51121020100,51121020300,51121020400,51121020700,51121020800,51121021100,51121021200,51121021500,51125950100,51125950200,51127700300,51131930300,51131990100,51133020300,51133990100,51135000100,51135980100,51137110102,51137110103,51137110300,51139030400,51141030100,51141030200,51143010300,51143010802,51143011300,51145500200,51147930100,51147930201,51147930203,51147930300,51153900300,51153900501,51153900600,51153900802,51153901001,51153901008,51153901100,51153901408,51153901410,51153901701,51153980100,51155210100,51155210400,51155980100,51155980200,51161030204,51161030500,51161030600,51161030801,51163930100,51163930300,51165010300,51165010800,51165011800,51167030200,51167030401,51171040100,51171040500,51175200300,51175200400,51177020205,51177020306,51177020310,51179010204,51179010207,51179010303,51183870202,51185020300,51185021100,51187020100,51191010100,51191010300,51193010100,51193010400,51197050100,51197050200,51199050204,51199990100,51510200103,51510200107,51510200303,51510200405,51510200702,51510201203,51510201600,51510201801,51520020200,51530930600,51550020804,51550020806,51550020807,51550020904,51550020906,51550021006,51550021102,51550021302,51550021404,51550021501,51550021502,51550021601,51590980100,51630000200,51650010313,51650010501,51650011000,51650990100,51670980100,51678930500,51680000202,51680000900,51680001600,51685920200,51700031601,51700032127,51700032224,51710980100,51710980200,51710980300,51710990000,51735990100,51740980100,51750010200,51760010200,51760020500,51760030500,51760040200,51760060500,51760061000,51760070801,51760070900,51760071001,51770002300,51770002500,51790000400,51800065300,51800065400,51800075101,51800075102,51800075201,51800075204,51800075403,51800075501,51810040402,51810041802,51810043003,51810044001,51810044003,51810044200,51810045406,51810045417,51810045423,51810045604,51810046005,51810046012,51810990100,51840000100,54003971102,54003971201,54003971202,54003971300,54003971400,54003971800,54003971900,54003972000,54003972102,54009031101,54009031400,54011010102,54011010201,54011010400,54011010700,54011010800,54019020100,54021967700,54025950100,54025950400,54025950700,54027968200,54027968300,54027968400,54027968600,54031970100,54031970200,54033030500,54033030602,54033030800,54033032101,54033032102,54035963700,54039010600,54039010801,54039012300,54039013000,54043955400,54045956101,54049021000,54049021200,54049021600,54051021000,54053954900,54061010102,54061010201,54061010600,54061011600,54065970700,54065971000,54067950200,54075960200,54077963800,54077964100,54079020603,54079020605,54087962900,54101970100,54107010701,54107010702]
cols=[i for i in df.columns if i not in ["tract_new"]]
for col in cols:
    df[col]=pd.to_numeric(df[col])
cols=[i for i in df_3.columns]
for col in cols:
    df_3[col]=pd.to_numeric(df_3[col])
df_2 = df[df['tract_old'].isin(UnmatchedTracts)]
df_int = pd.merge(df_2,
                  df_3,
                  left_on='tract_new',
                  right_on='GEO_ID',
                  how='left')
df_int["RspnRate"]=df_int["CRRALL"]*.01
df_int=df_int[['tract_old','stcobcu','tract_new','TotHU','RspnRate']]
df_final = df_int.fillna(0)
df_tract = df_final.groupby(['tract_old']).agg({'TotHU':"sum",'RspnRate':"mean"}).reset_index()
df_tract["RspondedHU"]=df_tract["TotHU"]*df_tract["RspnRate"]
df_tract["NoRspnHU"]=df_tract["TotHU"]-df_tract["RspondedHU"]
df_tract["RspondedHU"]=df_tract["RspondedHU"].astype(int)
df_tract["NoRspnHU"]=df_tract["NoRspnHU"].astype(int)
df_tract = df_tract.round({'RspnRate':3})
df_rr = pd.merge(df_planningtractint,
                  df_tract,
                  left_on='GEOID',
                  right_on='tract_old',
                  how='left')
df_rr = df_rr.fillna(0)
df_rr["Total Response Rate"]=df_rr["Total Response Rate"]+(100*df_rr["RspnRate"])
df_planningtractfinal=df_rr[list_tractrr]
print(df_planningtractfinal)

df_MCDfinal = pd.merge(df_mcdrr,
                  df_mcd_new,
                  left_on='GEOID',
                  right_on='GEO_ID',
                  how='left')
df_MCDfinal['Daily Response Rate'] = df_MCDfinal['CRRALL'] - df_MCDfinal['Total Response Rate']
df_MCDfinal['Daily Internet Response Rate'] = df_MCDfinal['CRRINT'] - df_MCDfinal['Internet Response Rate']
df_MCDfinal['Total Response Rate'] = df_MCDfinal['CRRALL']
df_MCDfinal['Internet Response Rate'] = df_MCDfinal['CRRINT']
df_MCDfinal=df_MCDfinal[list_mcdrr]
print(df_MCDfinal)

df_placefinal = pd.merge(df_placerr,
                  df_place_new,
                  left_on='GEOID',
                  right_on='GEO_ID',
                  how='left')
df_placefinal['Daily Response Rate'] = df_placefinal['CRRALL'] - df_placefinal['Total Response Rate']
df_placefinal['Daily Internet Response Rate'] = df_placefinal['CRRINT'] - df_placefinal['Internet Response Rate']
df_placefinal['Total Response Rate'] = df_placefinal['CRRALL']
df_placefinal['Internet Response Rate'] = df_placefinal['CRRINT']
df_placefinal=df_placefinal[list_placerr]
print(df_placefinal)

with pd.ExcelWriter('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseUpdate.xls') as writer:
    df_acofinal.to_excel(writer, sheet_name='ACO')
    df_statefinal.to_excel(writer, sheet_name='State')
    df_countyfinal.to_excel(writer, sheet_name='County')
    df_tractfinal.to_excel(writer, sheet_name='Tract')
    df_planningtractfinal.to_excel(writer, sheet_name='PlanningTracts')
    df_MCDfinal.to_excel(writer, sheet_name='Townships')
    df_placefinal.to_excel(writer, sheet_name='Place')
shutil.copy('M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseUpdate.xls','M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/')


if os.path.exists(ACO_dbf):
    os.remove(ACO_dbf)
    arcpy.AddMessage("ACO_Update.dbf successfully removed")
arcpy.AddMessage("Begin creating dbf table for ACO Update...")
arcpy.TableToTable_conversion(in_rows=ACO_Update, out_path=output_location, out_name="ACO_Update.dbf", where_clause="", field_mapping="", config_keyword="")
arcpy.AddMessage("ACO_Update.dbf complete. Begin join...")
arcpy.JoinField_management(in_data=ACO_Shape,in_field="Name",join_table=ACO_dbf,join_field="ACO_Name")
arcpy.AddMessage("Join complete. Begin field calculations...")
arcpy.CalculateField_management(in_table=ACO_Shape, field="RRate", expression="!Total_Re_1!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=ACO_Shape, field="IntRRate", expression="!Internet_R!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=ACO_Shape, field="NatAverage", expression=NatAvg, expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=ACO_Shape, field="NatComp", expression="!RRate! - !NatAverage!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Field Calculations complete. Begin deleting excess fields...")
arcpy.DeleteField_management(in_table=ACO_Shape, drop_field="Field1;ACO_1;ACO_Name;Lane;Total_Resp;Total_Re_1;Daily_Resp;Internet_R;Daily_Inte")
arcpy.AddMessage("Excess fields successfully deleted")

shutil.copytree(EveryoneRR,ArchiveFolder + ArchiveDay + "/")

for f in os.listdir(EveryoneRR):
    try:
        print(f)
        if os.path.isfile(os.path.join(EveryoneRR, f)):
            os.remove(os.path.join(EveryoneRR, f))
        elif os.path.isdir(os.path.join(EveryoneRR, f)):
            pass
    except:
        arcpy.AddMessage("Someone is using " + f)
for f in os.listdir(ACO_Everyone):
    try:
        print(f)
        os.remove(os.path.join(ACO_Everyone, f))
    except:
        arcpy.AddMessage("Someone is using " + f)
ACOfolder = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/ACO/'
for f in os.listdir(ACOfolder):
    try:
        print(f)
        os.remove(os.path.join(ACOfolder, f))
    except:
        arcpy.AddMessage("Someone is using " + f)
MapsFolder = 'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/'
for f in os.listdir(MapsFolder):
    try:
        print(f)
        if os.path.isfile(os.path.join(MapsFolder, f)):
            os.remove(os.path.join(MapsFolder, f))
        elif os.path.isdir(os.path.join(MapsFolder, f)):
            pass
    except:
        arcpy.AddMessage("Someone is using " + f)

mxd = arcpy.mapping.MapDocument(r"M:\08_Geography\GEO\SpecialProjects\ResponseRates\MXDs\ResponseRates_byACO.mxd")
Tract = [u'Tract Response Rates']
County = [u'County Response Rates']

print(Day)
mxd1 = arcpy.mapping.MapDocument(r"M:\08_Geography\GEO\SpecialProjects\ResponseRates\MXDs\ResponseRates.mxd")

arcpy.AddMessage("Turn county layer on and turn tract layer off, then save mxd...")
list = arcpy.mapping.ListLayers(mxd1)
for layer in list:
    if layer.name in Tract:
        layer.visible = False
for layer1 in list:
    if layer1.name in County:
        layer1.visible = True
mxd1.save()
arcpy.AddMessage("Begin exporting County Response Rate Map...")
arcpy.mapping.ExportToPDF(mxd1, r"M:\02_Everyone\GEOGRAPHY\ResponseRates\CountyResponseRates_" + Day + ".pdf")
shutil.copy("M:\\02_Everyone\\GEOGRAPHY\\ResponseRates\\CountyResponseRates_" + Day + ".pdf",'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/')

arcpy.AddMessage("Turn tract layer on and turn county layer off, then save mxd...")
list = arcpy.mapping.ListLayers(mxd1)
for layer in list:
    if layer.name in Tract:
        layer.visible = True
for layer1 in list:
    if layer1.name in County:
        layer1.visible = False
mxd1.save()
arcpy.AddMessage("Begin exporting Tract Response Rate Map...")
arcpy.mapping.ExportToPDF(mxd1, r"M:\02_Everyone\GEOGRAPHY\ResponseRates\TractResponseRates_" + Day + ".pdf")
shutil.copy("M:\\02_Everyone\\GEOGRAPHY\\ResponseRates\\TractResponseRates_" + Day + ".pdf",'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/')

arcpy.AddMessage("Turn county layer on and turn tract layer off, then save mxd...")
list = arcpy.mapping.ListLayers(mxd)
for layer in list:
    if layer.name in Tract:
        layer.visible = False
for layer1 in list:
    if layer1.name in County:
        layer1.visible = True
mxd.save()
arcpy.AddMessage("Begin exporting County Response Rate Maps by ACO...")
pageNameField = "ACO_CODE_I"
for pageNum in range(1, mxd.dataDrivenPages.pageCount + 1):
    mxd.dataDrivenPages.currentPageID = pageNum
    pageName = mxd.dataDrivenPages.pageRow.getValue(pageNameField)
    path = r"M:\02_Everyone\GEOGRAPHY\ResponseRates\ACO\CountyResponseRates_" + str(pageName) + "_" + Day + ".pdf"
    print(path)
    print "Exporting County page {0} of {1}".format(str(mxd.dataDrivenPages.currentPageID), str(mxd.dataDrivenPages.pageCount))
    arcpy.mapping.ExportToPDF(mxd, path)
    shutil.copy(path,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/ACO/')

arcpy.AddMessage("Turn tract layer on and turn county layer off, then save mxd...")
list = arcpy.mapping.ListLayers(mxd)
for layer in list:
    if layer.name in Tract:
        layer.visible = True
for layer1 in list:
    if layer1.name in County:
        layer1.visible = False
mxd.save()
arcpy.AddMessage("Begin exporting Tract Response Rate Maps by ACO...")
pageNameField = "ACO_CODE_I"
for pageNum in range(1, mxd.dataDrivenPages.pageCount + 1):
    mxd.dataDrivenPages.currentPageID = pageNum
    pageName = mxd.dataDrivenPages.pageRow.getValue(pageNameField)
    path = r"M:\02_Everyone\GEOGRAPHY\ResponseRates\ACO\TractResponseRates_" + str(pageName) + "_" + Day + ".pdf"
    print(path)
    print "Exporting Tract page {0} of {1}".format(str(mxd.dataDrivenPages.currentPageID), str(mxd.dataDrivenPages.pageCount))
    arcpy.mapping.ExportToPDF(mxd, path)
    shutil.copy(path,'M:/08_Geography/GEO/SpecialProjects/ResponseRates/Maps/ACO/')

arcpy.AddMessage("Begin moving response rates report to ACO folders...")



os.mkdir(RR_folder)
shutil.copy(RR_spreadsheet,RR_folder)
for ACO in ACOs:
    print(ACO)
    ACO_string = str(ACO)
    Drive = "M:/00_Area Offices/" + ACO_string + "_PHACO_Share/02_Everyone/Maps/ResponseRatesReport/"
    if os.path.exists(Drive):
        shutil.rmtree(Drive)
    else:
        pass
    CountyMap_name = 'CountyResponseRates_' + ACO_string + '_' + Day + '.pdf'
    shutil.copy(ACO_Everyone + CountyMap_name,RR_folder)
    TractMap_name = 'TractResponseRates_' + ACO_string + '_' + Day + '.pdf'
    shutil.copy(ACO_Everyone + TractMap_name,RR_folder)
    shutil.copytree(RR_folder,Drive)
    os.remove(RR_folder + CountyMap_name)
    os.remove(RR_folder + TractMap_name)
    print(ACO + ' copy complete...')
shutil.rmtree(RR_folder)

arcpy.AddMessage("Response rates report move to ACO folders complete...")

All_name = "RRate_" + Day
Internet_name = "IntRate_" + Day
archive_list = ['OID','GEO_ID']
archive_list.append(All_name)
archive_list.append(Internet_name)

TractTimelapse = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/TractResponseRateTimelapse"
CountyTimelapse = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CountyResponseRateTimelapse"
StateTimelapse = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/StateResponseRateTimelapse"
ACOTimelapse = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/ACOResponseRateTimelapse"
PlanningTractTimelapse = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/PlanningTractResponseRateTimelapse"
ACOUpdate = "M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/ACOUpdate"

"""
arcpy.AddMessage("Begin updating Tract Timelapse...")
arcpy.AddField_management(in_table=TractTimelapse, field_name=All_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=TractTimelapse, field_name=Internet_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddMessage("Today's Response Rate fields added...")
arcpy.JoinField_management(in_data=TractTimelapse, in_field="GEO_ID", join_table="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/TractsResponse", join_field="TractResponseRates_GEO_ID", fields="TractResponseRates_CRRALL;TractResponseRates_CRRINT")
arcpy.AddMessage("Today's Response Rate data added to table...")
arcpy.CalculateField_management(in_table=TractTimelapse, field=All_name, expression="!TractResponseRates_CRRALL!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=TractTimelapse, field=Internet_name, expression="!TractResponseRates_CRRINT!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Today's Response Rate data added to correct fields...")
arcpy.DeleteField_management(in_table=TractTimelapse, drop_field="TractResponseRates_CRRALL;TractResponseRates_CRRINT")
arcpy.AddMessage("Excess fields deleted...")
arcpy.AddMessage("Tract Timelapse updated...")
"""

arcpy.AddMessage("Begin updating County Timelapse...")
arcpy.AddField_management(in_table=CountyTimelapse, field_name=All_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=CountyTimelapse, field_name=Internet_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddMessage("Today's Response Rate fields added...")
arcpy.JoinField_management(in_data=CountyTimelapse, in_field="GEO_ID", join_table="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/CountiesResponse", join_field="CountyResponseRates_GEO_ID", fields="CountyResponseRates_CRRALL;CountyResponseRates_CRRINT")
arcpy.AddMessage("Today's Response Rate data added to table...")
arcpy.CalculateField_management(in_table=CountyTimelapse, field=All_name, expression="!CountyResponseRates_CRRALL!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=CountyTimelapse, field=Internet_name, expression="!CountyResponseRates_CRRINT!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Today's Response Rate data added to correct fields...")
arcpy.DeleteField_management(in_table=CountyTimelapse, drop_field="CountyResponseRates_CRRALL;CountyResponseRates_CRRINT")
arcpy.AddMessage("Excess fields deleted...")
arcpy.AddMessage("County Timelapse updated...")

arcpy.AddMessage("Begin updating Planning Tract Timelapse...")
arcpy.AddField_management(in_table=PlanningTractTimelapse, field_name=All_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=PlanningTractTimelapse, field_name=Internet_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddMessage("Today's Response Rate fields added...")
arcpy.JoinField_management(in_data=PlanningTractTimelapse, in_field="GEO_ID", join_table="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/TractsResponse", join_field="TractResponseRates_GEO_ID", fields="TractResponseRates_CRRALL;TractResponseRates_CRRINT")
arcpy.AddMessage("Today's Response Rate data added to table...")
arcpy.CalculateField_management(in_table=PlanningTractTimelapse, field=All_name, expression="!TractResponseRates_CRRALL!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=PlanningTractTimelapse, field=Internet_name, expression="!TractResponseRates_CRRINT!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Today's Response Rate data added to correct fields...")
arcpy.DeleteField_management(in_table=PlanningTractTimelapse, drop_field="TractResponseRates_CRRALL;TractResponseRates_CRRINT")
arcpy.AddMessage("Excess fields deleted...")
arcpy.AddMessage("Planning Tract Timelapse updated...")

arcpy.AddMessage("Begin updating State Timelapse...")
arcpy.AddField_management(in_table=StateTimelapse, field_name=All_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=StateTimelapse, field_name=Internet_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddMessage("Today's Response Rate fields added...")
arcpy.JoinField_management(in_data=StateTimelapse, in_field="GEO_ID", join_table="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/StatesResponse", join_field="StateResponseRates_GEO_ID", fields="StateResponseRates_CRRALL;StateResponseRates_CRRINT")
arcpy.AddMessage("Today's Response Rate data added to table...")
arcpy.CalculateField_management(in_table=StateTimelapse, field=All_name, expression="!StateResponseRates_CRRALL!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=StateTimelapse, field=Internet_name, expression="!StateResponseRates_CRRINT!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Today's Response Rate data added to correct fields...")
arcpy.DeleteField_management(in_table=StateTimelapse, drop_field="StateResponseRates_CRRALL;StateResponseRates_CRRINT")
arcpy.AddMessage("Excess fields deleted...")
arcpy.AddMessage("State Timelapse updated...")

arcpy.AddMessage("Begin updating ACO Timelapse...")
if arcpy.Exists(ACOUpdate):
    arcpy.Delete_management(in_data="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb/ACOUpdate", data_type="Table")
    arcpy.AddMessage("ACO Update deleted successfully...")
else:
    pass
arcpy.TableToTable_conversion(in_rows=ACO_Update, out_path="M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseMapper.gdb", out_name="ACOUpdate", where_clause="", field_mapping='ACO "ACO" true true false 8 Double 6 15 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls/ACO$,ACO,-1,-1;ACO_Name "ACO_Name" true true false 255 Text 0 0 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls/ACO$,ACO Name,-1,-1;Total_Response_Rate "Total_Response_Rate" true true false 8 Double 6 15 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls/ACO$,Total Response Rate,-1,-1;Internet_Response_Rate "Internet_Response_Rate" true true false 8 Double 6 15 ,First,#,M:/08_Geography/GEO/SpecialProjects/ResponseRates/ResponseRateMapper/ResponseUpdate.xls/ACO$,Internet Response Rate,-1,-1', config_keyword="")
arcpy.AddMessage("ACO Update created...")
arcpy.AddField_management(in_table=ACOTimelapse, field_name=All_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddField_management(in_table=ACOTimelapse, field_name=Internet_name, field_type="FLOAT", field_precision="4", field_scale="2", field_length="", field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")
arcpy.AddMessage("Today's Response Rate fields added...")
arcpy.JoinField_management(in_data=ACOTimelapse, in_field="GEO_ID", join_table=ACOUpdate, join_field="ACO", fields="Total_Response_Rate;Internet_Response_Rate")
arcpy.AddMessage("Today's Response Rate data added to table...")
arcpy.CalculateField_management(in_table=ACOTimelapse, field=All_name, expression="!Total_Response_Rate!", expression_type="PYTHON", code_block="")
arcpy.CalculateField_management(in_table=ACOTimelapse, field=Internet_name, expression="!Internet_Response_Rate!", expression_type="PYTHON", code_block="")
arcpy.AddMessage("Today's Response Rate data added to correct fields...")
arcpy.DeleteField_management(in_table=ACOTimelapse, drop_field="Total_Response_Rate;Internet_Response_Rate")
arcpy.AddMessage("Excess fields deleted...")
arcpy.AddMessage("ACO Timelapse updated...")
