import pandas as pd
import csv
import requests
import numpy
import json
import arcpy
import os
import xlwt

print('Grabbing data from API...')
##creating empty dataframes to append the respective Geography's API results to
tracts_finaldf = pd.DataFrame()
counties_finaldf = pd.DataFrame()
MCD_finaldf = pd.DataFrame()
place_finaldf = pd.DataFrame()
cd_finaldf = pd.DataFrame()




NYRCC_States = ['09','23','25','33','34','36','44','50','72']

#if you do not append an API key to the end of the URL, you will be limited to 500 requests per day. An api key is free and can be requsted by providing your emial
#address to the Census Bureau API website
key = #if using a key, your API key goes here

#iterating through all of the state FIPS codes for our region and adding that to the API URL
for state in NYRCC_States:
    #we cant iterate through a unviersal list of all of the county codes for each state because they are different for each state, and building a list or dictionary would be 
    #time consuming and unneccsary. We instead are making an API call for each state that will return a json where one column is all of the county
    #FIPS codes and then we are appending that to the counties list. Then we are iterating through the counties list we built when making
    #the api calls. We will us this to get tracts, because and the API limits tract results to only calls for each county
    # go to this link https://api.census.gov/data/2010/dec/responserate/examples.html to see the available API urls and an example of what is returned
    #for each call.
    
    counties = []
    #look up the requests module in python for info on what this section is doing
    url = 'https://api.census.gov/data/2010/dec/responserate?get=COUNTY&for=county:*&in=state:'+state+'&key='+key
    r = requests.get(url)
    result = r.json()
    i = 1
    while i < len(result):
        counties.append(str(result[i][0]))
        i+=1
    for county in counties:
        print('Getting ' + state + ' County: ' + county + ' tracts...')  
        t_url = 'https://api.census.gov/data/2010/dec/responserate?get=GEO_ID,FSRR2010&for=tract:*&in=state:'+state+'&in=county:'+county+'&key='+key
        r = requests.get(t_url)
        tract_json = r.json()
        #making a temporary dataframe from the json for each iteration and then appending it to the global dataframe    
        t_df = pd.DataFrame(data= tract_json[1:],columns= tract_json[0])
        tracts_finaldf= tracts_finaldf.append(t_df)

    #Puerto Rico (FIPS code 72) does not have congressional districts, MCD or IncPlaces and therefore the API call to that URL would 404
    if state != '72':
        print('Getting State:' + state + ' Congressional Districts')
        cd_url = 'https://api.census.gov/data/2010/dec/responserate?get=GEO_ID,FSRR2010&for=congressional%20district:*&in=state:'+state+'&key='+key
        cd_r = requests.get(cd_url)
        cd_json = cd_r.json()
        cd_df = pd.DataFrame(data= cd_json[1:],columns= cd_json[0])
        cd_finaldf = cd_finaldf.append(cd_df)
        print('Getting State:' + state + ' MCDs...')    
        mcd_url = 'https://api.census.gov/data/2010/dec/responserate?get=GEO_ID,FSRR2010&for=county%20subdivision:*&in=state:'+state+'&key='+key
        mcd_r = requests.get(mcd_url)
        mcd_json = mcd_r.json()
        mcd_df = pd.DataFrame(data= mcd_json[1:],columns= mcd_json[0])
        MCD_finaldf = MCD_finaldf.append(mcd_df)
        print('Getting State:' + state + ' places...')
        pl_url = 'https://api.census.gov/data/2010/dec/responserate?get=GEO_ID,FSRR2010&for=place:*&in=state:'+state+'&key='+key
        pl_r = requests.get(pl_url)
        pl_json = pl_r.json()
        pl_df = pd.DataFrame(data= pl_json[1:],columns= pl_json[0])
        place_finaldf = place_finaldf.append(pl_df)
    print('Getting State:' + state + ' counties...')
    c_url = 'https://api.census.gov/data/2010/dec/responserate?get=GEO_ID,FSRR2010&for=county:*&in=state:'+state+'&key='+key
    county_r = requests.get(c_url)
    county_json = county_r.json()
    c_df = pd.DataFrame(data= county_json[1:],columns= county_json[0])
    counties_finaldf = counties_finaldf.append(c_df)

#The GEOID from the API includes a random string of 9 numbers before the actual geoid, in order to have this
# join successfully to the shapefile we need to remove these characters
# we are then exporting to a csv to import into a GDB        
tracts_finaldf['GEO_ID'] =  tracts_finaldf.GEO_ID.str.slice(start=9)
tracts_finaldf.to_csv('Tract_APIpull.csv')
counties_finaldf['GEO_ID'] =  counties_finaldf.GEO_ID.str.slice(start=9)
counties_finaldf.to_csv('County_APIpull.csv')
place_finaldf['GEO_ID'] =  place_finaldf.GEO_ID.str.slice(start=9)
place_finaldf.to_csv('Place_APIpull.csv')
MCD_finaldf['GEO_ID'] =  MCD_finaldf.GEO_ID.str.slice(start=9)
MCD_finaldf.to_csv('MCD_APIpull.csv')
cd_finaldf['GEO_ID'] =  cd_finaldf.GEO_ID.str.slice(start=9)
cd_finaldf.to_csv('CD_APIpull.csv')


#deleting the existing excel doc to create the new one with the new data
if os.path.exists('M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseData.xls'):
    os.remove('M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseData.xls')


workbook = xlwt.Workbook()
workbook.add_sheet("Sheet")
workbook.save('M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseData.xls')

#writing the dataframes to individual sheets of the excel document. This excel document is for easy access of the data by partnerhsip and not
#going to be used in this code
with pd.ExcelWriter('M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseRateMapper\\ResponseData.xls') as writer:
    counties_finaldf.to_excel(writer, sheet_name='County')
    tracts_finaldf.to_excel(writer, sheet_name='Tract')
    MCD_finaldf.to_excel(writer, sheet_name='MCDs')
    place_finaldf.to_excel(writer, sheet_name='Place')
    cd_finaldf.to_excel(writer, sheet_name= 'CD')


print('Data pulled successfully. ')
print('***********************************')
print('')
print('Importing CSV to Geodatabase...')



# Local variables:
tract_apipull_csv = "M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv"
County_APIpull_csv = "M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv"
Place_APIPull_csv = "M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv"
MCD_APIPull_csv = "M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv"
CD_APIPull_csv = "M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv"

ResponseMapper_gdb = "M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseRateMapper\\ResponseMapper.gdb"

# Set the current workspace
arcpy.env.workspace = "M:\\02_Everyone\\2020 Census\\08_Geography\\ResponseRateMapper\\ResponseMapper.gdb"

# Check for existence of data before deleting
if arcpy.Exists("TractResponseRates"):
    arcpy.Delete_management("TractResponseRates")
if arcpy.Exists("CountyResponseRates"):
    arcpy.Delete_management("CountyResponseRates")
if arcpy.Exists("MCDResponseRates"):
    arcpy.Delete_management("MCDResponseRates")
if arcpy.Exists("PlaceResponseRates"):
    arcpy.Delete_management("PlaceResponseRates")
if arcpy.Exists("CDResponseRates"):
    arcpy.Delete_management("CDResponseRates")
    
# Process: Table to Table
arcpy.TableToTable_conversion(tract_apipull_csv, ResponseMapper_gdb, "TractResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 12 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,GEO_ID,-1,-1;FSRR2010 \"FSRR2010\" true true false 8 Double 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,FSRR2010,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,,county,-1,-1;tract \"tract\" true true false 8 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Tract_APIpull.csv,tract,-1,-1", "")
arcpy.TableToTable_conversion(County_APIpull_csv, ResponseMapper_gdb, "CountyResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 6 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv,GEO_ID,-1,-1;FSRR2010 \"FSRR2010\" true true false 8 Double 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv,FSRR2010,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\County_APIpull.csv,county,-1,-1", "")
arcpy.TableToTable_conversion(MCD_APIPull_csv, ResponseMapper_gdb, "MCDResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 10 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,GEO_ID,-1,-1;FSRR2010 \"FSRR2010\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,FSRR2010,-1,-1;state \"state\" true true false 3 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,state,-1,-1;county \"county\" true true false 3 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,county,-1,-1;county_subdivision \"county subdivision\" true true false 10 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\MCD_APIpull.csv,county subdivision,-1,-1", "")
arcpy.TableToTable_conversion(Place_APIPull_csv, ResponseMapper_gdb, "PlaceResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 12 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv,GEO_ID,-1,-1;FSRR2010 \"FSRR2010\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv,FSRR2010,-1,-1;state \"state\" true true false 4 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv,state,-1,-1;place \"place\" true true false 10 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\Place_APIpull.csv,place,-1,-1", "")
arcpy.TableToTable_conversion(CD_APIPull_csv, ResponseMapper_gdb, "CDResponseRates", "", "Field1 \"Field1\" true true false 4 Long 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv,Field1,-1,-1;GEO_ID \"GEO_ID\" true true false 6 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv,GEO_ID,-1,-1;FSRR2010 \"FSRR2010\" true true false 8 Double 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv,FSRR2010,-1,-1;state \"state\" true true false 2 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv,state,-1,-1;congressional_district \"congressional district\" true true false 3 Text 0 0 ,First,#,M:\\08_Geography\\ResponseRateMapper\\CD_APIpull.csv,congressional district,-1,-1", "")


tracttable = 'M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/TractResponseRates'
countytable = 'M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CountyResponseRates'
placetable = 'M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/PlaceResponseRates'
mcdtable = 'M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/MCDResponseRates'
cdtable =  'M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CDResponseRates'


print("data imported.")
print('')
print('adding leading zeros to GEOID field...')

# add leading zeros to tract GEOID
with arcpy.da.UpdateCursor(tracttable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 10:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(countytable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 4:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(placetable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 6:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(mcdtable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 9:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)
with arcpy.da.UpdateCursor(cdtable, "GEO_ID") as cursor:
    for row in cursor:
        if len(row[0]) == 3:
            row[0] = "0"+ row[0]
        cursor.updateRow(row)




print('')
print('joining data to featureclass...')
arcpy.MakeFeatureLayer_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/NYRegionTracts","Tracts")
arcpy.MakeTableView_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/TractResponseRates", "TractResponseData")

arcpy.MakeFeatureLayer_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/NYRegionCounties","Counties")
arcpy.MakeTableView_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CountyResponseRates", "CountyResponseData")

arcpy.MakeFeatureLayer_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CountySubdivision","MCDs")
arcpy.MakeTableView_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/MCDResponseRates", "MCDResponseData")

arcpy.MakeFeatureLayer_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/NYRegion_IncPlace_BAS20_v90","IncPlaces")
arcpy.MakeTableView_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/PlaceResponseRates", "PlaceResponseData")

arcpy.MakeFeatureLayer_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CongressionalDistrict","CongressionalDistricts")
arcpy.MakeTableView_management("M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/CDResponseRates", "CDResponseData")

inlayer = "Tracts"
in_Field = "GEOID"
joinTable = "TractResponseData"
joinField = "GEO_ID"

arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)

if arcpy.Exists("Tracts_Joined"):
    arcpy.Delete_management("Tracts_Joined")
    
arcpy.CopyFeatures_management(inlayer,"M:/02_Everyone/2020 Census/08_Geography/ResponseRateMapper/ResponseMapper.gdb/Tracts_Joined" )

arcpy.RemoveJoin_management (inlayer)

inlayer = "Counties"
in_Field = "GEOID"
joinTable = "CountyResponseData"
joinField = "GEO_ID"

arcpy.AddJoin_management (inlayer, in_Field, joinTable, joinField)


if arcpy.Exists("Counties_Joined"):
    arcpy.Delete_management("Counties_Joined")
